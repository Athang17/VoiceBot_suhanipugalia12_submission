import React from 'react';
import { jsPDF } from 'jspdf';

const ConversationSummary = ({ messages, darkMode, activeLanguage }) => {
  const generateSummary = () => {
    return messages
      .filter(msg => msg.sender !== 'system')
      .map(msg => {
        const sender = msg.sender === 'user' 
          ? (activeLanguage === 'hi' ? 'आप' : 'You') 
          : (activeLanguage === 'hi' ? 'सहायक' : 'Assistant');
        return `${sender} (${msg.timestamp}): ${msg.text}`;
      })
      .join('\n\n');
  };

  const exportToPDF = () => {
    const doc = new jsPDF();
    const date = new Date().toLocaleString();
    const margin = 15;
    const lineHeight = 7;
    let yPosition = margin;

    // Set document properties
    doc.setProperties({
      title: 'Conversation Summary',
      subject: 'Chat conversation export',
      author: 'Chat App',
      keywords: 'conversation, chat, export',
      creator: 'Chat App'
    });

    // Add title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(40, 40, 40);
    doc.text(`Conversation Summary - ${date}`, margin, yPosition);
    yPosition += lineHeight * 1.5;

    // Add divider line
    doc.setDrawColor(200, 200, 200);
    doc.line(margin, yPosition, 200 - margin, yPosition);
    yPosition += lineHeight;

    // Set body text style
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(80, 80, 80);

    // Process conversation text with proper formatting
    const conversationText = generateSummary();
    const splitText = doc.splitTextToSize(conversationText, 180 - (2 * margin));

    // Add conversation content with sender-based formatting
    splitText.forEach(line => {
      // Check if we need a new page
      if (yPosition > 280) {
        doc.addPage();
        yPosition = margin;
      }

      // Style differently based on sender
      if (line.startsWith('You') || line.startsWith('आप')) {
        doc.setTextColor(0, 102, 204); // Blue for user
      } else if (line.startsWith('Assistant') || line.startsWith('सहायक')) {
        doc.setTextColor(204, 0, 0); // Red for assistant
      } else {
        doc.setTextColor(80, 80, 80); // Default gray
      }

      doc.text(line, margin, yPosition);
      yPosition += lineHeight;
    });

    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Chat App', margin, 285, { align: 'left' });
    doc.text(`Page 1 of ${doc.internal.getNumberOfPages()}`, 200 - margin, 285, { align: 'right' });

    // Save the PDF
    doc.save(`conversation_summary_${date.replace(/[/,:]/g, '_')}.pdf`);
  };

  return (
    <div className={`p-3 rounded-lg shadow mt-4 ${darkMode ? 'bg-gray-800 text-white' : 'bg-white text-gray-800'}`}>
      <button
        onClick={exportToPDF}
        className={`w-full py-2 px-4 rounded-lg font-medium ${
          darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'
        } text-white transition-colors duration-200`}
      >
        {activeLanguage === 'hi' ? 'PDF निर्यात करें' : 'Export as PDF'}
      </button>
    </div>
  );
};

export default ConversationSummary;